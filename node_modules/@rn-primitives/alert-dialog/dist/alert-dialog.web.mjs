'use client'

// src/alert-dialog.web.tsx
import * as AlertDialog from "@radix-ui/react-alert-dialog";
import {
  useAugmentedRef,
  useControllableState,
  useIsomorphicLayoutEffect
} from "@rn-primitives/hooks";
import * as Slot from "@rn-primitives/slot";
import * as React from "react";
import { Pressable as Pressable2, Text as Text2, View as View2 } from "react-native";
var AlertDialogContext = React.createContext(null);
var Root2 = React.forwardRef(
  ({ asChild, open: openProp, defaultOpen, onOpenChange: onOpenChangeProp, ...viewProps }, ref) => {
    const [open = false, onOpenChange] = useControllableState({
      prop: openProp,
      defaultProp: defaultOpen,
      onChange: onOpenChangeProp
    });
    const Component = asChild ? Slot.View : View2;
    return <AlertDialogContext.Provider value={{ open, onOpenChange }}>
        <AlertDialog.Root open={open} defaultOpen={defaultOpen} onOpenChange={onOpenChange}>
          <Component ref={ref} {...viewProps} />
        </AlertDialog.Root>
      </AlertDialogContext.Provider>;
  }
);
Root2.displayName = "RootAlertWebDialog";
function useRootContext() {
  const context = React.useContext(AlertDialogContext);
  if (!context) {
    throw new Error(
      "AlertDialog compound components cannot be rendered outside the AlertDialog component"
    );
  }
  return context;
}
var Trigger2 = React.forwardRef(
  ({ asChild, onPress: onPressProp, role: _role, disabled, ...props }, ref) => {
    const augmentedRef = useAugmentedRef({ ref });
    const { onOpenChange, open } = useRootContext();
    function onPress(ev) {
      if (onPressProp) {
        onPressProp(ev);
      }
      onOpenChange(!open);
    }
    useIsomorphicLayoutEffect(() => {
      if (augmentedRef.current) {
        const augRef = augmentedRef.current;
        augRef.dataset.state = open ? "open" : "closed";
        augRef.type = "button";
      }
    }, [open]);
    const Component = asChild ? Slot.Pressable : Pressable2;
    return <AlertDialog.Trigger disabled={disabled ?? void 0} asChild>
        <Component
      ref={augmentedRef}
      onPress={onPress}
      role='button'
      disabled={disabled}
      {...props}
    />
      </AlertDialog.Trigger>;
  }
);
Trigger2.displayName = "TriggerAlertWebDialog";
function Portal2({ forceMount, container, children }) {
  return <AlertDialog.Portal forceMount={forceMount} children={children} container={container} />;
}
var Overlay2 = React.forwardRef(
  ({ asChild, forceMount, ...props }, ref) => {
    const Component = asChild ? Slot.View : View2;
    return <AlertDialog.Overlay forceMount={forceMount}>
        <Component ref={ref} {...props} />
      </AlertDialog.Overlay>;
  }
);
Overlay2.displayName = "OverlayAlertWebDialog";
var Content2 = React.forwardRef(
  ({ asChild, forceMount, onOpenAutoFocus, onCloseAutoFocus, onEscapeKeyDown, ...props }, ref) => {
    const augmentedRef = useAugmentedRef({ ref });
    const { open } = useRootContext();
    useIsomorphicLayoutEffect(() => {
      if (augmentedRef.current) {
        const augRef = augmentedRef.current;
        augRef.dataset.state = open ? "open" : "closed";
      }
    }, [open]);
    const Component = asChild ? Slot.View : View2;
    return <AlertDialog.Content
      onOpenAutoFocus={onOpenAutoFocus}
      onCloseAutoFocus={onCloseAutoFocus}
      onEscapeKeyDown={onEscapeKeyDown}
      forceMount={forceMount}
      asChild
    >
        <Component ref={augmentedRef} {...props} />
      </AlertDialog.Content>;
  }
);
Content2.displayName = "ContentAlertWebDialog";
var Cancel2 = React.forwardRef(
  ({ asChild, onPress: onPressProp, disabled, ...props }, ref) => {
    const augmentedRef = useAugmentedRef({ ref });
    const { onOpenChange, open } = useRootContext();
    function onPress(ev) {
      if (onPressProp) {
        onPressProp(ev);
      }
      onOpenChange(!open);
    }
    useIsomorphicLayoutEffect(() => {
      if (augmentedRef.current) {
        const augRef = augmentedRef.current;
        augRef.type = "button";
      }
    }, []);
    const Component = asChild ? Slot.Pressable : Pressable2;
    return <>
        <AlertDialog.Cancel disabled={disabled ?? void 0} asChild>
          <Component
      ref={augmentedRef}
      onPress={onPress}
      role='button'
      disabled={disabled}
      {...props}
    />
        </AlertDialog.Cancel>
      </>;
  }
);
Cancel2.displayName = "CancelAlertWebDialog";
var Action2 = React.forwardRef(
  ({ asChild, onPress: onPressProp, disabled, ...props }, ref) => {
    const augmentedRef = useAugmentedRef({ ref });
    const { onOpenChange, open } = useRootContext();
    function onPress(ev) {
      if (onPressProp) {
        onPressProp(ev);
      }
      onOpenChange(!open);
    }
    useIsomorphicLayoutEffect(() => {
      if (augmentedRef.current) {
        const augRef = augmentedRef.current;
        augRef.type = "button";
      }
    }, []);
    const Component = asChild ? Slot.Pressable : Pressable2;
    return <>
        <AlertDialog.Action disabled={disabled ?? void 0} asChild>
          <Component
      ref={augmentedRef}
      onPress={onPress}
      role='button'
      disabled={disabled}
      {...props}
    />
        </AlertDialog.Action>
      </>;
  }
);
Action2.displayName = "ActionAlertWebDialog";
var Title2 = React.forwardRef(({ asChild, ...props }, ref) => {
  const Component = asChild ? Slot.Text : Text2;
  return <AlertDialog.Title asChild>
      <Component ref={ref} {...props} />
    </AlertDialog.Title>;
});
Title2.displayName = "TitleAlertWebDialog";
var Description2 = React.forwardRef(
  ({ asChild, ...props }, ref) => {
    const Component = asChild ? Slot.Text : Text2;
    return <AlertDialog.Description asChild>
        <Component ref={ref} {...props} />
      </AlertDialog.Description>;
  }
);
Description2.displayName = "DescriptionAlertWebDialog";
export {
  Action2 as Action,
  Cancel2 as Cancel,
  Content2 as Content,
  Description2 as Description,
  Overlay2 as Overlay,
  Portal2 as Portal,
  Root2 as Root,
  Title2 as Title,
  Trigger2 as Trigger,
  useRootContext
};
