'use client'

// src/alert-dialog.tsx
import { useControllableState } from "@rn-primitives/hooks";
import { Portal as RNPPortal } from "@rn-primitives/portal";
import * as Slot from "@rn-primitives/slot";
import * as React from "react";
import { BackHandler, Pressable as Pressable2, Text as Text2, View as View2 } from "react-native";
var AlertDialogContext = React.createContext(null);
var Root = React.forwardRef(
  ({ asChild, open: openProp, defaultOpen, onOpenChange: onOpenChangeProp, ...viewProps }, ref) => {
    const nativeID = React.useId();
    const [open = false, onOpenChange] = useControllableState({
      prop: openProp,
      defaultProp: defaultOpen,
      onChange: onOpenChangeProp
    });
    const Component = asChild ? Slot.View : View2;
    return <AlertDialogContext.Provider
      value={{
        open,
        onOpenChange,
        nativeID
      }}
    >
        <Component ref={ref} {...viewProps} />
      </AlertDialogContext.Provider>;
  }
);
Root.displayName = "RootNativeAlertDialog";
function useRootContext() {
  const context = React.useContext(AlertDialogContext);
  if (!context) {
    throw new Error(
      "AlertDialog compound components cannot be rendered outside the AlertDialog component"
    );
  }
  return context;
}
var Trigger = React.forwardRef(
  ({ asChild, onPress: onPressProp, disabled = false, ...props }, ref) => {
    const { open: value, onOpenChange } = useRootContext();
    function onPress(ev) {
      onOpenChange(!value);
      onPressProp?.(ev);
    }
    const Component = asChild ? Slot.Pressable : Pressable2;
    return <Component
      ref={ref}
      aria-disabled={disabled ?? void 0}
      role='button'
      onPress={onPress}
      disabled={disabled ?? void 0}
      {...props}
    />;
  }
);
Trigger.displayName = "TriggerNativeAlertDialog";
function Portal({ forceMount, hostName, children }) {
  const value = useRootContext();
  if (!forceMount) {
    if (!value.open) {
      return null;
    }
  }
  return <RNPPortal hostName={hostName} name={`${value.nativeID}_portal`}>
      <AlertDialogContext.Provider value={value}>{children}</AlertDialogContext.Provider>
    </RNPPortal>;
}
var Overlay = React.forwardRef(
  ({ asChild, forceMount, ...props }, ref) => {
    const { open: value } = useRootContext();
    if (!forceMount) {
      if (!value) {
        return null;
      }
    }
    const Component = asChild ? Slot.View : View2;
    return <Component ref={ref} {...props} />;
  }
);
Overlay.displayName = "OverlayNativeAlertDialog";
var Content = React.forwardRef(
  ({ asChild, forceMount, ...props }, ref) => {
    const { open: value, nativeID, onOpenChange } = useRootContext();
    React.useEffect(() => {
      const backHandler = BackHandler.addEventListener("hardwareBackPress", () => {
        onOpenChange(false);
        return true;
      });
      return () => {
        backHandler.remove();
      };
    }, []);
    if (!forceMount) {
      if (!value) {
        return null;
      }
    }
    const Component = asChild ? Slot.View : View2;
    return <Component
      ref={ref}
      role='alertdialog'
      nativeID={nativeID}
      aria-labelledby={`${nativeID}_label`}
      aria-describedby={`${nativeID}_desc`}
      aria-modal={true}
      {...props}
    />;
  }
);
Content.displayName = "ContentNativeAlertDialog";
var Cancel = React.forwardRef(
  ({ asChild, onPress: onPressProp, disabled = false, ...props }, ref) => {
    const { onOpenChange } = useRootContext();
    function onPress(ev) {
      if (disabled) return;
      onOpenChange(false);
      onPressProp?.(ev);
    }
    const Component = asChild ? Slot.Pressable : Pressable2;
    return <Component
      ref={ref}
      aria-disabled={disabled ?? void 0}
      role='button'
      onPress={onPress}
      disabled={disabled ?? void 0}
      {...props}
    />;
  }
);
Cancel.displayName = "CloseNativeAlertDialog";
var Action = React.forwardRef(
  ({ asChild, onPress: onPressProp, disabled = false, ...props }, ref) => {
    const { onOpenChange } = useRootContext();
    function onPress(ev) {
      if (disabled) return;
      onOpenChange(false);
      onPressProp?.(ev);
    }
    const Component = asChild ? Slot.Pressable : Pressable2;
    return <Component
      ref={ref}
      aria-disabled={disabled ?? void 0}
      role='button'
      onPress={onPress}
      disabled={disabled ?? void 0}
      {...props}
    />;
  }
);
Action.displayName = "ActionNativeAlertDialog";
var Title = React.forwardRef(({ asChild, ...props }, ref) => {
  const { nativeID } = useRootContext();
  const Component = asChild ? Slot.Text : Text2;
  return <Component ref={ref} role='heading' nativeID={`${nativeID}_label`} {...props} />;
});
Title.displayName = "TitleNativeAlertDialog";
var Description = React.forwardRef(
  ({ asChild, ...props }, ref) => {
    const { nativeID } = useRootContext();
    const Component = asChild ? Slot.Text : Text2;
    return <Component ref={ref} nativeID={`${nativeID}_desc`} {...props} />;
  }
);
Description.displayName = "DescriptionNativeAlertDialog";
export {
  Action,
  Cancel,
  Content,
  Description,
  Overlay,
  Portal,
  Root,
  Title,
  Trigger,
  useRootContext
};
