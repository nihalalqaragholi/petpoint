import * as _rn_primitives_types from '@rn-primitives/types';
import * as react_native from 'react-native';
import { View, Text } from 'react-native';
import * as React from 'react';
import { PortalProps, RootContext } from './index.js';
import './alert-dialog';

declare const Root: React.ForwardRefExoticComponent<{
    open?: boolean;
    onOpenChange?: (value: boolean) => void;
    defaultOpen?: boolean;
} & react_native.ViewProps & {
    asChild?: boolean;
} & React.RefAttributes<View>>;
declare function useRootContext(): RootContext & {
    nativeID: string;
};
declare const Trigger: React.ForwardRefExoticComponent<Omit<react_native.PressableProps & React.RefAttributes<View>, "ref"> & {
    asChild?: boolean;
} & {
    onKeyDown?: (ev: React.KeyboardEvent) => void;
    onKeyUp?: (ev: React.KeyboardEvent) => void;
} & React.RefAttributes<View>>;
/**
 * @warning when using a custom `<PortalHost />`, you might have to adjust the Content's sideOffset to account for nav elements like headers.
 */
declare function Portal({ forceMount, hostName, children }: PortalProps): React.JSX.Element | null;
declare const Overlay: React.ForwardRefExoticComponent<_rn_primitives_types.ForceMountable & react_native.ViewProps & {
    asChild?: boolean;
} & React.RefAttributes<View>>;
declare const Content: React.ForwardRefExoticComponent<_rn_primitives_types.ForceMountable & react_native.ViewProps & {
    asChild?: boolean;
} & {
    onOpenAutoFocus?: (ev: Event) => void;
    onCloseAutoFocus?: (ev: Event) => void;
    onEscapeKeyDown?: (ev: Event) => void;
} & React.RefAttributes<View>>;
declare const Cancel: React.ForwardRefExoticComponent<Omit<react_native.PressableProps & React.RefAttributes<View>, "ref"> & {
    asChild?: boolean;
} & {
    onKeyDown?: (ev: React.KeyboardEvent) => void;
    onKeyUp?: (ev: React.KeyboardEvent) => void;
} & React.RefAttributes<View>>;
declare const Action: React.ForwardRefExoticComponent<Omit<react_native.PressableProps & React.RefAttributes<View>, "ref"> & {
    asChild?: boolean;
} & {
    onKeyDown?: (ev: React.KeyboardEvent) => void;
    onKeyUp?: (ev: React.KeyboardEvent) => void;
} & React.RefAttributes<View>>;
declare const Title: React.ForwardRefExoticComponent<react_native.TextProps & {
    asChild?: boolean;
} & React.RefAttributes<Text>>;
declare const Description: React.ForwardRefExoticComponent<react_native.TextProps & {
    asChild?: boolean;
} & React.RefAttributes<Text>>;

export { Action, Cancel, Content, Description, Overlay, Portal, Root, Title, Trigger, useRootContext };
