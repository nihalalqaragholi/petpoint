'use client'
"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  EmptyGestureResponderEvent: () => EmptyGestureResponderEvent,
  ToggleGroupUtils: () => ToggleGroupUtils
});
module.exports = __toCommonJS(src_exports);
var ToggleGroupUtils = {
  getIsSelected(value, itemValue) {
    if (value === void 0) {
      return false;
    }
    if (typeof value === "string") {
      return value === itemValue;
    }
    return value.includes(itemValue);
  },
  getNewSingleValue(originalValue, itemValue) {
    if (originalValue === itemValue) {
      return void 0;
    }
    return itemValue;
  },
  getNewMultipleValue(originalValue, itemValue) {
    if (originalValue === void 0) {
      return [itemValue];
    }
    if (typeof originalValue === "string") {
      return originalValue === itemValue ? [] : [originalValue, itemValue];
    }
    if (originalValue.includes(itemValue)) {
      return originalValue.filter((v) => v !== itemValue);
    }
    return [...originalValue, itemValue];
  }
};
var EmptyGestureResponderEvent = {
  nativeEvent: {
    changedTouches: [],
    identifier: "0",
    locationX: 0,
    locationY: 0,
    pageX: 0,
    pageY: 0,
    target: "0",
    timestamp: 0,
    touches: []
  },
  bubbles: false,
  cancelable: false,
  currentTarget: {},
  defaultPrevented: false,
  eventPhase: 0,
  persist: () => {
  },
  isDefaultPrevented: () => false,
  isPropagationStopped: () => false,
  isTrusted: false,
  preventDefault: () => {
  },
  stopPropagation: () => {
  },
  target: {},
  timeStamp: 0,
  type: ""
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  EmptyGestureResponderEvent,
  ToggleGroupUtils
});
