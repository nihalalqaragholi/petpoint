'use client'

// src/context-menu.tsx
import {
  useAugmentedRef,
  useControllableState,
  useRelativePosition
} from "@rn-primitives/hooks";
import { Portal as RNPPortal } from "@rn-primitives/portal";
import * as Slot from "@rn-primitives/slot";
import * as React from "react";
import {
  BackHandler,
  Pressable as Pressable2,
  Text as Text2,
  View as View2
} from "react-native";
var RootContext = React.createContext(null);
var Root = React.forwardRef(
  ({ asChild, relativeTo = "longPress", onOpenChange: onOpenChangeProp, ...viewProps }, ref) => {
    const nativeID = React.useId();
    const [pressPosition, setPressPosition] = React.useState(null);
    const [contentLayout, setContentLayout] = React.useState(null);
    const [open, setOpen] = React.useState(false);
    function onOpenChange(value) {
      setOpen(value);
      onOpenChangeProp?.(value);
    }
    const Component = asChild ? Slot.View : View2;
    return <RootContext.Provider
      value={{
        open,
        onOpenChange,
        relativeTo,
        contentLayout,
        nativeID,
        pressPosition,
        setContentLayout,
        setPressPosition
      }}
    >
        <Component ref={ref} {...viewProps} />
      </RootContext.Provider>;
  }
);
Root.displayName = "RootNativeContextMenu";
function useRootContext() {
  const context = React.useContext(RootContext);
  if (!context) {
    throw new Error(
      "ContextMenu compound components cannot be rendered outside the ContextMenu component"
    );
  }
  return context;
}
var accessibilityActions = [{ name: "longpress" }];
var Trigger = React.forwardRef(
  ({
    asChild,
    onLongPress: onLongPressProp,
    disabled = false,
    onAccessibilityAction: onAccessibilityActionProp,
    ...props
  }, ref) => {
    const { open, onOpenChange, relativeTo, setPressPosition } = useRootContext();
    const augmentedRef = useAugmentedRef({
      ref,
      methods: {
        open: () => {
          onOpenChange(true);
          augmentedRef.current?.measure((_x, _y, width, height, pageX, pageY) => {
            setPressPosition({ width, pageX, pageY, height });
          });
        },
        close: () => {
          setPressPosition(null);
          onOpenChange(false);
        }
      }
    });
    function onLongPress(ev) {
      if (disabled) return;
      if (relativeTo === "longPress") {
        setPressPosition({
          width: 0,
          pageX: ev.nativeEvent.pageX,
          pageY: ev.nativeEvent.pageY,
          height: 0
        });
      }
      if (relativeTo === "trigger") {
        augmentedRef.current?.measure((_x, _y, width, height, pageX, pageY) => {
          setPressPosition({ width, pageX, pageY, height });
        });
      }
      onOpenChange(!open);
      onLongPressProp?.(ev);
    }
    function onAccessibilityAction(event) {
      if (disabled) return;
      if (event.nativeEvent.actionName === "longpress") {
        setPressPosition({
          width: 0,
          pageX: 0,
          pageY: 0,
          height: 0
        });
        const newValue = !open;
        onOpenChange(newValue);
      }
      onAccessibilityActionProp?.(event);
    }
    const Component = asChild ? Slot.Pressable : Pressable2;
    return <Component
      ref={augmentedRef}
      aria-disabled={disabled ?? void 0}
      role='button'
      onLongPress={onLongPress}
      disabled={disabled ?? void 0}
      aria-expanded={open}
      accessibilityActions={accessibilityActions}
      onAccessibilityAction={onAccessibilityAction}
      {...props}
    />;
  }
);
Trigger.displayName = "TriggerNativeContextMenu";
function Portal({ forceMount, hostName, children }) {
  const value = useRootContext();
  if (!value.pressPosition) {
    return null;
  }
  if (!forceMount) {
    if (!value.open) {
      return null;
    }
  }
  return <RNPPortal hostName={hostName} name={`${value.nativeID}_portal`}>
      <RootContext.Provider value={value}>{children}</RootContext.Provider>
    </RNPPortal>;
}
var Overlay = React.forwardRef(
  ({ asChild, forceMount, onPress: OnPressProp, closeOnPress = true, ...props }, ref) => {
    const { open, onOpenChange, setContentLayout, setPressPosition } = useRootContext();
    function onPress(ev) {
      if (closeOnPress) {
        setPressPosition(null);
        setContentLayout(null);
        onOpenChange(false);
      }
      OnPressProp?.(ev);
    }
    if (!forceMount) {
      if (!open) {
        return null;
      }
    }
    const Component = asChild ? Slot.Pressable : Pressable2;
    return <Component ref={ref} onPress={onPress} {...props} />;
  }
);
Overlay.displayName = "OverlayNativeContextMenu";
var Content = React.forwardRef(
  ({
    asChild = false,
    forceMount,
    align = "start",
    side = "bottom",
    sideOffset = 0,
    alignOffset = 0,
    avoidCollisions = true,
    onLayout: onLayoutProp,
    insets,
    style,
    disablePositioningStyle,
    ...props
  }, ref) => {
    const {
      open,
      onOpenChange,
      contentLayout,
      nativeID,
      pressPosition,
      setContentLayout,
      setPressPosition
    } = useRootContext();
    React.useEffect(() => {
      const backHandler = BackHandler.addEventListener("hardwareBackPress", () => {
        setPressPosition(null);
        setContentLayout(null);
        onOpenChange(false);
        return true;
      });
      return () => {
        setContentLayout(null);
        backHandler.remove();
      };
    }, []);
    const positionStyle = useRelativePosition({
      align,
      avoidCollisions,
      triggerPosition: pressPosition,
      contentLayout,
      alignOffset,
      insets,
      sideOffset,
      side,
      disablePositioningStyle
    });
    function onLayout(event) {
      setContentLayout(event.nativeEvent.layout);
      onLayoutProp?.(event);
    }
    if (!forceMount) {
      if (!open) {
        return null;
      }
    }
    const Component = asChild ? Slot.View : View2;
    return <Component
      ref={ref}
      role='menu'
      nativeID={nativeID}
      aria-modal={true}
      style={[positionStyle, style]}
      onLayout={onLayout}
      onStartShouldSetResponder={onStartShouldSetResponder}
      {...props}
    />;
  }
);
Content.displayName = "ContentNativeContextMenu";
var Item = React.forwardRef(
  ({ asChild, textValue, onPress: onPressProp, disabled = false, closeOnPress = true, ...props }, ref) => {
    const { onOpenChange, setContentLayout, setPressPosition } = useRootContext();
    function onPress(ev) {
      if (closeOnPress) {
        setPressPosition(null);
        setContentLayout(null);
        onOpenChange(false);
      }
      onPressProp?.(ev);
    }
    const Component = asChild ? Slot.Pressable : Pressable2;
    return <Component
      ref={ref}
      role='menuitem'
      onPress={onPress}
      disabled={disabled}
      aria-valuetext={textValue}
      aria-disabled={!!disabled}
      accessibilityState={{ disabled: !!disabled }}
      {...props}
    />;
  }
);
Item.displayName = "ItemNativeContextMenu";
var Group = React.forwardRef(({ asChild, ...props }, ref) => {
  const Component = asChild ? Slot.View : View2;
  return <Component ref={ref} role='group' {...props} />;
});
Group.displayName = "GroupNativeContextMenu";
var Label = React.forwardRef(({ asChild, ...props }, ref) => {
  const Component = asChild ? Slot.Text : Text2;
  return <Component ref={ref} {...props} />;
});
Label.displayName = "LabelNativeContextMenu";
var FormItemContext = React.createContext(null);
var CheckboxItem = React.forwardRef(
  ({
    asChild,
    checked,
    onCheckedChange,
    textValue,
    onPress: onPressProp,
    closeOnPress = true,
    disabled = false,
    ...props
  }, ref) => {
    const { onOpenChange, setContentLayout, setPressPosition, nativeID } = useRootContext();
    function onPress(ev) {
      onCheckedChange(!checked);
      if (closeOnPress) {
        setPressPosition(null);
        setContentLayout(null);
        onOpenChange(false);
      }
      onPressProp?.(ev);
    }
    const Component = asChild ? Slot.Pressable : Pressable2;
    return <FormItemContext.Provider value={{ checked }}>
        <Component
      ref={ref}
      role='checkbox'
      aria-checked={checked}
      onPress={onPress}
      disabled={disabled}
      aria-disabled={!!disabled}
      aria-valuetext={textValue}
      accessibilityState={{ disabled: !!disabled }}
      {...props}
    />
      </FormItemContext.Provider>;
  }
);
CheckboxItem.displayName = "CheckboxItemNativeContextMenu";
function useFormItemContext() {
  const context = React.useContext(FormItemContext);
  if (!context) {
    throw new Error(
      "CheckboxItem or RadioItem compound components cannot be rendered outside of a CheckboxItem or RadioItem component"
    );
  }
  return context;
}
var RadioGroup = React.forwardRef(
  ({ asChild, value, onValueChange, ...props }, ref) => {
    const Component = asChild ? Slot.View : View2;
    return <FormItemContext.Provider value={{ value, onValueChange }}>
        <Component ref={ref} role='radiogroup' {...props} />
      </FormItemContext.Provider>;
  }
);
RadioGroup.displayName = "RadioGroupNativeContextMenu";
var RadioItemContext = React.createContext({});
var RadioItem = React.forwardRef(
  ({
    asChild,
    value: itemValue,
    textValue,
    onPress: onPressProp,
    disabled = false,
    closeOnPress = true,
    ...props
  }, ref) => {
    const { onOpenChange, setContentLayout, setPressPosition } = useRootContext();
    const { value, onValueChange } = useFormItemContext();
    function onPress(ev) {
      onValueChange(itemValue);
      if (closeOnPress) {
        setPressPosition(null);
        setContentLayout(null);
        onOpenChange(false);
      }
      onPressProp?.(ev);
    }
    const Component = asChild ? Slot.Pressable : Pressable2;
    return <RadioItemContext.Provider value={{ itemValue }}>
        <Component
      ref={ref}
      onPress={onPress}
      role='radio'
      aria-checked={value === itemValue}
      disabled={disabled ?? false}
      accessibilityState={{
        disabled: disabled ?? false,
        checked: value === itemValue
      }}
      aria-valuetext={textValue}
      {...props}
    />
      </RadioItemContext.Provider>;
  }
);
RadioItem.displayName = "RadioItemNativeContextMenu";
function useItemIndicatorContext() {
  return React.useContext(RadioItemContext);
}
var ItemIndicator = React.forwardRef(
  ({ asChild, forceMount, ...props }, ref) => {
    const { itemValue } = useItemIndicatorContext();
    const { checked, value } = useFormItemContext();
    if (!forceMount) {
      if (itemValue == null && !checked) {
        return null;
      }
      if (value !== itemValue) {
        return null;
      }
    }
    const Component = asChild ? Slot.View : View2;
    return <Component ref={ref} role='presentation' {...props} />;
  }
);
ItemIndicator.displayName = "ItemIndicatorNativeContextMenu";
var Separator = React.forwardRef(
  ({ asChild, decorative, ...props }, ref) => {
    const Component = asChild ? Slot.View : View2;
    return <Component role={decorative ? "presentation" : "separator"} ref={ref} {...props} />;
  }
);
Separator.displayName = "SeparatorNativeContextMenu";
var SubContext = React.createContext(null);
var Sub = React.forwardRef(
  ({ asChild, defaultOpen, open: openProp, onOpenChange: onOpenChangeProp, ...props }, ref) => {
    const nativeID = React.useId();
    const [open = false, onOpenChange] = useControllableState({
      prop: openProp,
      defaultProp: defaultOpen,
      onChange: onOpenChangeProp
    });
    const Component = asChild ? Slot.View : View2;
    return <SubContext.Provider
      value={{
        nativeID,
        open,
        onOpenChange
      }}
    >
        <Component ref={ref} {...props} />
      </SubContext.Provider>;
  }
);
Sub.displayName = "SubNativeContextMenu";
function useSubContext() {
  const context = React.useContext(SubContext);
  if (!context) {
    throw new Error("Sub compound components cannot be rendered outside of a Sub component");
  }
  return context;
}
var SubTrigger = React.forwardRef(
  ({ asChild, textValue, onPress: onPressProp, disabled = false, ...props }, ref) => {
    const { nativeID, open, onOpenChange } = useSubContext();
    function onPress(ev) {
      onOpenChange(!open);
      onPressProp?.(ev);
    }
    const Component = asChild ? Slot.Pressable : Pressable2;
    return <Component
      ref={ref}
      aria-valuetext={textValue}
      role='menuitem'
      aria-expanded={open}
      accessibilityState={{ expanded: open, disabled: !!disabled }}
      nativeID={nativeID}
      onPress={onPress}
      disabled={disabled}
      aria-disabled={!!disabled}
      {...props}
    />;
  }
);
SubTrigger.displayName = "SubTriggerNativeContextMenu";
var SubContent = React.forwardRef(
  ({ asChild = false, forceMount, ...props }, ref) => {
    const { open, nativeID } = useSubContext();
    if (!forceMount) {
      if (!open) {
        return null;
      }
    }
    const Component = asChild ? Slot.Pressable : Pressable2;
    return <Component ref={ref} role='group' aria-labelledby={nativeID} {...props} />;
  }
);
Content.displayName = "ContentNativeContextMenu";
function onStartShouldSetResponder() {
  return true;
}
export {
  CheckboxItem,
  Content,
  Group,
  Item,
  ItemIndicator,
  Label,
  Overlay,
  Portal,
  RadioGroup,
  RadioItem,
  Root,
  Separator,
  Sub,
  SubContent,
  SubTrigger,
  Trigger,
  useRootContext,
  useSubContext
};
