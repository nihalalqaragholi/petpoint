'use client'
"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/context-menu.web.tsx
var context_menu_web_exports = {};
__export(context_menu_web_exports, {
  CheckboxItem: () => CheckboxItem2,
  Content: () => Content2,
  Group: () => Group2,
  Item: () => Item2,
  ItemIndicator: () => ItemIndicator2,
  Label: () => Label2,
  Overlay: () => Overlay,
  Portal: () => Portal2,
  RadioGroup: () => RadioGroup2,
  RadioItem: () => RadioItem2,
  Root: () => Root2,
  Separator: () => Separator2,
  Sub: () => Sub2,
  SubContent: () => SubContent2,
  SubTrigger: () => SubTrigger2,
  Trigger: () => Trigger2,
  useRootContext: () => useRootContext,
  useSubContext: () => useSubContext
});
module.exports = __toCommonJS(context_menu_web_exports);
var ContextMenu = __toESM(require("@radix-ui/react-context-menu"));
var import_hooks = require("@rn-primitives/hooks");
var Slot = __toESM(require("@rn-primitives/slot"));
var import_utils = require("@rn-primitives/utils");
var React = __toESM(require("react"));
var import_react_native = require("react-native");
var ContextMenuContext = React.createContext(null);
var Root2 = React.forwardRef(
  ({ asChild, onOpenChange: onOpenChangeProp, ...viewProps }, ref) => {
    const [open, setOpen] = React.useState(false);
    function onOpenChange(value) {
      setOpen(value);
      onOpenChangeProp?.(value);
    }
    const Component = asChild ? Slot.View : import_react_native.View;
    return <ContextMenuContext.Provider value={{ open, onOpenChange }}>
        <ContextMenu.Root onOpenChange={onOpenChange}>
          <Component ref={ref} {...viewProps} />
        </ContextMenu.Root>
      </ContextMenuContext.Provider>;
  }
);
Root2.displayName = "RootWebContextMenu";
function useRootContext() {
  const context = React.useContext(ContextMenuContext);
  if (!context) {
    throw new Error(
      "ContextMenu compound components cannot be rendered outside the ContextMenu component"
    );
  }
  return context;
}
var Trigger2 = React.forwardRef(
  ({ asChild, disabled = false, ...props }, ref) => {
    const { open } = useRootContext();
    const augmentedRef = (0, import_hooks.useAugmentedRef)({
      ref,
      methods: {
        open() {
          console.warn("Warning: `open()` is only for Native platforms");
        },
        close() {
          console.warn("Warning: `close()` is only for Native platforms");
        }
      }
    });
    (0, import_hooks.useIsomorphicLayoutEffect)(() => {
      if (augmentedRef.current) {
        const augRef = augmentedRef.current;
        augRef.dataset.state = open ? "open" : "closed";
      }
    }, [open]);
    (0, import_hooks.useIsomorphicLayoutEffect)(() => {
      if (augmentedRef.current) {
        const augRef = augmentedRef.current;
        if (disabled) {
          augRef.dataset.disabled = "true";
        } else {
          augRef.dataset.disabled = void 0;
        }
      }
    }, [disabled]);
    const Component = asChild ? Slot.Pressable : import_react_native.Pressable;
    return <ContextMenu.Trigger disabled={disabled ?? void 0} asChild>
        <Component ref={augmentedRef} disabled={disabled} {...props} />
      </ContextMenu.Trigger>;
  }
);
Trigger2.displayName = "TriggerWebContextMenu";
function Portal2({ forceMount, container, children }) {
  return <ContextMenu.Portal forceMount={forceMount} container={container} children={children} />;
}
var Overlay = React.forwardRef(({ asChild, ...props }, ref) => {
  const Component = asChild ? Slot.Pressable : import_react_native.Pressable;
  return <Component ref={ref} {...props} />;
});
Overlay.displayName = "OverlayWebContextMenu";
var ContextMenuContentContext = React.createContext(null);
var Content2 = React.forwardRef(
  ({
    asChild = false,
    forceMount,
    align: _align,
    side: _side,
    sideOffset: _sideOffset,
    alignOffset = 0,
    avoidCollisions = true,
    insets,
    loop = true,
    onCloseAutoFocus,
    onEscapeKeyDown,
    onPointerDownOutside,
    onFocusOutside,
    onInteractOutside,
    collisionBoundary,
    sticky,
    hideWhenDetached,
    ...props
  }, ref) => {
    const itemRef = React.useRef(null);
    function close() {
      itemRef.current?.click();
    }
    const Component = asChild ? Slot.View : import_react_native.View;
    return <ContextMenuContentContext.Provider value={{ close }}>
        <ContextMenu.Content
      forceMount={forceMount}
      alignOffset={alignOffset}
      avoidCollisions={avoidCollisions}
      collisionPadding={insets}
      loop={loop}
      onCloseAutoFocus={onCloseAutoFocus}
      onEscapeKeyDown={onEscapeKeyDown}
      onPointerDownOutside={onPointerDownOutside}
      onFocusOutside={onFocusOutside}
      onInteractOutside={onInteractOutside}
      collisionBoundary={collisionBoundary}
      sticky={sticky}
      hideWhenDetached={hideWhenDetached}
    >
          <Component ref={ref} {...props} />
          <ContextMenu.Item
      ref={itemRef}
      aria-hidden
      style={{ position: "fixed", top: 0, left: 0, zIndex: -999999999 }}
      aria-disabled
      tabIndex={-1}
      hidden
    />
        </ContextMenu.Content>
      </ContextMenuContentContext.Provider>;
  }
);
Content2.displayName = "ContentWebContextMenu";
function useContextMenuContentContext() {
  const context = React.useContext(ContextMenuContentContext);
  if (!context) {
    throw new Error(
      "ContextMenu compound components cannot be rendered outside the ContextMenu component"
    );
  }
  return context;
}
var Item2 = React.forwardRef(
  ({ asChild, textValue, closeOnPress = true, onPress: onPressProp, ...props }, ref) => {
    const { close } = useContextMenuContentContext();
    function onKeyDown(ev) {
      if (ev.key === "Enter" || ev.key === " ") {
        onPressProp?.(import_utils.EmptyGestureResponderEvent);
        if (closeOnPress) {
          close();
        }
      }
    }
    function onPress(ev) {
      onPressProp?.(ev);
      if (closeOnPress) {
        close();
      }
    }
    const Component = asChild ? Slot.Pressable : import_react_native.Pressable;
    return <ContextMenu.Item
      textValue={textValue}
      disabled={props.disabled ?? void 0}
      onSelect={closeOnPress ? void 0 : onSelected}
      asChild
    >
        <Component ref={ref} role='button' onPress={onPress} onKeyDown={onKeyDown} {...props} />
      </ContextMenu.Item>;
  }
);
Item2.displayName = "ItemWebContextMenu";
var Group2 = React.forwardRef(({ asChild, ...props }, ref) => {
  const Component = asChild ? Slot.View : import_react_native.View;
  return <ContextMenu.Group asChild>
      <Component ref={ref} {...props} />
    </ContextMenu.Group>;
});
Group2.displayName = "GroupWebContextMenu";
var Label2 = React.forwardRef(({ asChild, ...props }, ref) => {
  const Component = asChild ? Slot.Text : import_react_native.Text;
  return <ContextMenu.Label asChild>
      <Component ref={ref} {...props} />
    </ContextMenu.Label>;
});
Label2.displayName = "LabelWebContextMenu";
var CheckboxItem2 = React.forwardRef(
  ({
    asChild,
    checked,
    onCheckedChange,
    textValue,
    disabled = false,
    closeOnPress = true,
    onPress: onPressProp,
    onKeyDown: onKeyDownProp,
    ...props
  }, ref) => {
    const { close } = useContextMenuContentContext();
    function onKeyDown(ev) {
      onKeyDownProp?.(ev);
      if (ev.key === "Enter" || ev.key === " ") {
        onPressProp?.(import_utils.EmptyGestureResponderEvent);
        onCheckedChange?.(!checked);
        if (closeOnPress) {
          close();
        }
      }
    }
    function onPress(ev) {
      onPressProp?.(ev);
      onCheckedChange?.(!checked);
      if (closeOnPress) {
        close();
      }
    }
    const Component = asChild ? Slot.Pressable : import_react_native.Pressable;
    return <ContextMenu.CheckboxItem
      textValue={textValue}
      checked={checked}
      onCheckedChange={onCheckedChange}
      onSelect={closeOnPress ? void 0 : onSelected}
      disabled={disabled ?? void 0}
      asChild
    >
        <Component
      ref={ref}
      disabled={disabled}
      onKeyDown={onKeyDown}
      onPress={onPress}
      role='button'
      {...props}
    />
      </ContextMenu.CheckboxItem>;
  }
);
CheckboxItem2.displayName = "CheckboxItemWebContextMenu";
var ContextMenuRadioGroupContext = React.createContext(null);
var RadioGroup2 = React.forwardRef(
  ({ asChild, value, onValueChange, ...props }, ref) => {
    const Component = asChild ? Slot.View : import_react_native.View;
    return <ContextMenuRadioGroupContext.Provider value={{ value, onValueChange }}>
        <ContextMenu.RadioGroup value={value} onValueChange={onValueChange} asChild>
          <Component ref={ref} {...props} />
        </ContextMenu.RadioGroup>
      </ContextMenuRadioGroupContext.Provider>;
  }
);
RadioGroup2.displayName = "RadioGroupWebContextMenu";
function useContextMenuRadioGroupContext() {
  const context = React.useContext(ContextMenuRadioGroupContext);
  if (!context) {
    throw new Error(
      "ContextMenu compound components cannot be rendered outside the ContextMenu component"
    );
  }
  return context;
}
var RadioItem2 = React.forwardRef(
  ({
    asChild,
    value,
    textValue,
    closeOnPress = true,
    onPress: onPressProp,
    onKeyDown: onKeyDownProp,
    ...props
  }, ref) => {
    const { onValueChange } = useContextMenuRadioGroupContext();
    const { close } = useContextMenuContentContext();
    function onKeyDown(ev) {
      onKeyDownProp?.(ev);
      if (ev.key === "Enter" || ev.key === " ") {
        onValueChange?.(value);
        onPressProp?.(import_utils.EmptyGestureResponderEvent);
        if (closeOnPress) {
          close();
        }
      }
    }
    function onPress(ev) {
      onValueChange?.(value);
      onPressProp?.(ev);
      if (closeOnPress) {
        close();
      }
    }
    const Component = asChild ? Slot.Pressable : import_react_native.Pressable;
    return <ContextMenu.RadioItem
      value={value}
      textValue={textValue}
      disabled={props.disabled ?? void 0}
      onSelect={closeOnPress ? void 0 : onSelected}
      asChild
    >
        <Component
      ref={ref}
      onKeyDown={onKeyDown}
      onPress={onPress}
      {...props}
    />
      </ContextMenu.RadioItem>;
  }
);
RadioItem2.displayName = "RadioItemWebContextMenu";
var ItemIndicator2 = React.forwardRef(
  ({ asChild, forceMount, ...props }, ref) => {
    const Component = asChild ? Slot.View : import_react_native.View;
    return <ContextMenu.ItemIndicator forceMount={forceMount} asChild>
        <Component ref={ref} {...props} />
      </ContextMenu.ItemIndicator>;
  }
);
ItemIndicator2.displayName = "ItemIndicatorWebContextMenu";
var Separator2 = React.forwardRef(
  ({ asChild, decorative, ...props }, ref) => {
    const Component = asChild ? Slot.View : import_react_native.View;
    return <ContextMenu.Separator asChild>
        <Component ref={ref} {...props} />
      </ContextMenu.Separator>;
  }
);
Separator2.displayName = "SeparatorWebContextMenu";
var ContextMenuSubContext = React.createContext(null);
var Sub2 = React.forwardRef(
  ({ asChild, defaultOpen, open: openProp, onOpenChange: onOpenChangeProp, ...props }, ref) => {
    const [open = false, onOpenChange] = (0, import_hooks.useControllableState)({
      prop: openProp,
      defaultProp: defaultOpen,
      onChange: onOpenChangeProp
    });
    const Component = asChild ? Slot.View : import_react_native.View;
    return <ContextMenuSubContext.Provider value={{ open, onOpenChange }}>
        <ContextMenu.Sub open={open} onOpenChange={onOpenChange}>
          <Component ref={ref} {...props} />
        </ContextMenu.Sub>
      </ContextMenuSubContext.Provider>;
  }
);
Sub2.displayName = "SubWebContextMenu";
function useSubContext() {
  const context = React.useContext(ContextMenuSubContext);
  if (!context) {
    throw new Error(
      "ContextMenu compound components cannot be rendered outside the ContextMenu component"
    );
  }
  return context;
}
var SubTrigger2 = React.forwardRef(
  ({ asChild, textValue, disabled = false, onPress: onPressProp, ...props }, ref) => {
    const { onOpenChange } = useSubContext();
    function onPress(ev) {
      onOpenChange(true);
      onPressProp?.(ev);
    }
    const Component = asChild ? Slot.Pressable : import_react_native.Pressable;
    return <ContextMenu.SubTrigger disabled={disabled ?? void 0} textValue={textValue} asChild>
        <Component ref={ref} onPress={onPress} {...props} />
      </ContextMenu.SubTrigger>;
  }
);
SubTrigger2.displayName = "SubTriggerWebContextMenu";
var SubContent2 = React.forwardRef(
  ({ asChild = false, forceMount, ...props }, ref) => {
    const Component = asChild ? Slot.Pressable : import_react_native.Pressable;
    return <ContextMenu.Portal>
        <ContextMenu.SubContent forceMount={forceMount}>
          <Component ref={ref} {...props} />
        </ContextMenu.SubContent>
      </ContextMenu.Portal>;
  }
);
Content2.displayName = "ContentWebContextMenu";
function onSelected(ev) {
  ev.preventDefault();
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  CheckboxItem,
  Content,
  Group,
  Item,
  ItemIndicator,
  Label,
  Overlay,
  Portal,
  RadioGroup,
  RadioItem,
  Root,
  Separator,
  Sub,
  SubContent,
  SubTrigger,
  Trigger,
  useRootContext,
  useSubContext
});
