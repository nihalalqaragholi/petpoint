'use client'
"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/checkbox.web.tsx
var checkbox_web_exports = {};
__export(checkbox_web_exports, {
  Indicator: () => Indicator2,
  Root: () => Root2
});
module.exports = __toCommonJS(checkbox_web_exports);
var Checkbox = __toESM(require("@radix-ui/react-checkbox"));
var import_hooks = require("@rn-primitives/hooks");
var Slot = __toESM(require("@rn-primitives/slot"));
var React = __toESM(require("react"));
var import_react_native = require("react-native");
var CheckboxContext = React.createContext(null);
var Root2 = React.forwardRef(
  ({ asChild, disabled, checked, onCheckedChange, onPress: onPressProp, role: _role, ...props }, ref) => {
    const augmentedRef = (0, import_hooks.useAugmentedRef)({ ref });
    function onPress(ev) {
      onPressProp?.(ev);
      onCheckedChange(!checked);
    }
    (0, import_hooks.useIsomorphicLayoutEffect)(() => {
      if (augmentedRef.current) {
        const augRef = augmentedRef.current;
        augRef.dataset.state = checked ? "checked" : "unchecked";
        augRef.value = checked ? "on" : "off";
      }
    }, [checked]);
    (0, import_hooks.useIsomorphicLayoutEffect)(() => {
      if (augmentedRef.current) {
        const augRef = augmentedRef.current;
        augRef.type = "button";
        augRef.role = "checkbox";
        if (disabled) {
          augRef.dataset.disabled = "true";
        } else {
          augRef.dataset.disabled = void 0;
        }
      }
    }, [disabled]);
    const Component = asChild ? Slot.Pressable : import_react_native.Pressable;
    return <CheckboxContext.Provider value={{ checked, disabled, onCheckedChange }}>
        <Checkbox.Root
      checked={checked}
      onCheckedChange={onCheckedChange}
      disabled={disabled}
      asChild
    >
          <Component
      ref={augmentedRef}
      role='button'
      onPress={onPress}
      disabled={disabled}
      {...props}
    />
        </Checkbox.Root>
      </CheckboxContext.Provider>;
  }
);
Root2.displayName = "RootWebCheckbox";
function useCheckboxContext() {
  const context = React.useContext(CheckboxContext);
  if (context === null) {
    throw new Error(
      "Checkbox compound components cannot be rendered outside the Checkbox component"
    );
  }
  return context;
}
var Indicator2 = React.forwardRef(
  ({ asChild, forceMount, ...props }, ref) => {
    const { checked, disabled } = useCheckboxContext();
    const augmentedRef = (0, import_hooks.useAugmentedRef)({ ref });
    (0, import_hooks.useIsomorphicLayoutEffect)(() => {
      if (augmentedRef.current) {
        const augRef = augmentedRef.current;
        augRef.dataset.state = checked ? "checked" : "unchecked";
      }
    }, [checked]);
    (0, import_hooks.useIsomorphicLayoutEffect)(() => {
      if (augmentedRef.current) {
        const augRef = augmentedRef.current;
        if (disabled) {
          augRef.dataset.disabled = "true";
        } else {
          augRef.dataset.disabled = void 0;
        }
      }
    }, [disabled]);
    const Component = asChild ? Slot.View : import_react_native.View;
    return <Checkbox.Indicator forceMount={forceMount} asChild>
        <Component ref={ref} {...props} />
      </Checkbox.Indicator>;
  }
);
Indicator2.displayName = "IndicatorWebCheckbox";
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Indicator,
  Root
});
