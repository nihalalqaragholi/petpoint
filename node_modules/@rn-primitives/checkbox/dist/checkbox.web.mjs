'use client'

// src/checkbox.web.tsx
import * as Checkbox from "@radix-ui/react-checkbox";
import { useAugmentedRef, useIsomorphicLayoutEffect } from "@rn-primitives/hooks";
import * as Slot from "@rn-primitives/slot";
import * as React from "react";
import { Pressable as Pressable2, View as View2 } from "react-native";
var CheckboxContext = React.createContext(null);
var Root2 = React.forwardRef(
  ({ asChild, disabled, checked, onCheckedChange, onPress: onPressProp, role: _role, ...props }, ref) => {
    const augmentedRef = useAugmentedRef({ ref });
    function onPress(ev) {
      onPressProp?.(ev);
      onCheckedChange(!checked);
    }
    useIsomorphicLayoutEffect(() => {
      if (augmentedRef.current) {
        const augRef = augmentedRef.current;
        augRef.dataset.state = checked ? "checked" : "unchecked";
        augRef.value = checked ? "on" : "off";
      }
    }, [checked]);
    useIsomorphicLayoutEffect(() => {
      if (augmentedRef.current) {
        const augRef = augmentedRef.current;
        augRef.type = "button";
        augRef.role = "checkbox";
        if (disabled) {
          augRef.dataset.disabled = "true";
        } else {
          augRef.dataset.disabled = void 0;
        }
      }
    }, [disabled]);
    const Component = asChild ? Slot.Pressable : Pressable2;
    return <CheckboxContext.Provider value={{ checked, disabled, onCheckedChange }}>
        <Checkbox.Root
      checked={checked}
      onCheckedChange={onCheckedChange}
      disabled={disabled}
      asChild
    >
          <Component
      ref={augmentedRef}
      role='button'
      onPress={onPress}
      disabled={disabled}
      {...props}
    />
        </Checkbox.Root>
      </CheckboxContext.Provider>;
  }
);
Root2.displayName = "RootWebCheckbox";
function useCheckboxContext() {
  const context = React.useContext(CheckboxContext);
  if (context === null) {
    throw new Error(
      "Checkbox compound components cannot be rendered outside the Checkbox component"
    );
  }
  return context;
}
var Indicator2 = React.forwardRef(
  ({ asChild, forceMount, ...props }, ref) => {
    const { checked, disabled } = useCheckboxContext();
    const augmentedRef = useAugmentedRef({ ref });
    useIsomorphicLayoutEffect(() => {
      if (augmentedRef.current) {
        const augRef = augmentedRef.current;
        augRef.dataset.state = checked ? "checked" : "unchecked";
      }
    }, [checked]);
    useIsomorphicLayoutEffect(() => {
      if (augmentedRef.current) {
        const augRef = augmentedRef.current;
        if (disabled) {
          augRef.dataset.disabled = "true";
        } else {
          augRef.dataset.disabled = void 0;
        }
      }
    }, [disabled]);
    const Component = asChild ? Slot.View : View2;
    return <Checkbox.Indicator forceMount={forceMount} asChild>
        <Component ref={ref} {...props} />
      </Checkbox.Indicator>;
  }
);
Indicator2.displayName = "IndicatorWebCheckbox";
export {
  Indicator2 as Indicator,
  Root2 as Root
};
