"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ContextMenuButton = void 0;
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _RNIContextMenuButton = require("../../native_components/RNIContextMenuButton");
var _ContextMenuView = require("../ContextMenuView");
var _ContextMenuButtonContext = require("../../context/ContextMenuButtonContext");
var _LibEnv = require("../../constants/LibEnv");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }
class ContextMenuButton extends _react.default.PureComponent {
  constructor(props) {
    super(props);
    this.state = {
      menuVisible: false
    };
  }
  getProps = () => {
    const {
      menuConfig,
      isContextMenuEnabled,
      isMenuPrimaryAction,
      onMenuWillShow,
      onMenuWillHide,
      onMenuWillCancel,
      onMenuDidShow,
      onMenuDidHide,
      onMenuDidCancel,
      onPressMenuItem,
      onRequestDeferredElement,
      ...viewProps
    } = this.props;
    return {
      // A. Provide default values to props...
      isContextMenuEnabled: isContextMenuEnabled ?? true,
      isMenuPrimaryAction: isMenuPrimaryAction ?? true,
      // B. Pass down props...
      menuConfig,
      onMenuWillShow,
      onMenuWillHide,
      onMenuWillCancel,
      onMenuDidShow,
      onMenuDidHide,
      onMenuDidCancel,
      onPressMenuItem,
      onRequestDeferredElement,
      // C. Move all the default view-related
      //    props here...
      viewProps
    };
  };
  presentMenu = async () => {
    if (!_LibEnv.LIB_ENV.isContextMenuViewSupported) return;
    await this.nativeRef.presentMenu();
  };
  dismissMenu = async () => {
    if (!_LibEnv.LIB_ENV.isContextMenuButtonSupported) return;
    this.nativeRef.dismissMenu();
  };
  provideDeferredElements = async (deferredID, menuItems) => {
    if (!_LibEnv.LIB_ENV.isContextMenuViewSupported) return;
    this.nativeRef.provideDeferredElements(deferredID, menuItems);
  };
  _handleGetRefToContextMenuButton = () => {
    return this;
  };
  _handleOnMenuWillShow = event => {
    var _this$props$onMenuWil, _this$props;
    (_this$props$onMenuWil = (_this$props = this.props).onMenuWillShow) === null || _this$props$onMenuWil === void 0 || _this$props$onMenuWil.call(_this$props, event);
    event.stopPropagation();
    this.setState({
      menuVisible: true
    });
  };
  _handleOnMenuWillHide = event => {
    var _this$props$onMenuWil2, _this$props2;
    (_this$props$onMenuWil2 = (_this$props2 = this.props).onMenuWillHide) === null || _this$props$onMenuWil2 === void 0 || _this$props$onMenuWil2.call(_this$props2, event);
    event.stopPropagation();
    this.setState({
      menuVisible: false
    });
  };
  _handleOnMenuWillCancel = event => {
    var _this$props$onMenuWil3, _this$props3;
    (_this$props$onMenuWil3 = (_this$props3 = this.props).onMenuWillCancel) === null || _this$props$onMenuWil3 === void 0 || _this$props$onMenuWil3.call(_this$props3, event);
    event.stopPropagation();
  };
  _handleOnMenuDidShow = event => {
    var _this$props$onMenuDid, _this$props4;
    (_this$props$onMenuDid = (_this$props4 = this.props).onMenuDidShow) === null || _this$props$onMenuDid === void 0 || _this$props$onMenuDid.call(_this$props4, event);
    event.stopPropagation();
  };
  _handleOnMenuDidHide = event => {
    var _this$props$onMenuDid2, _this$props5;
    (_this$props$onMenuDid2 = (_this$props5 = this.props).onMenuDidHide) === null || _this$props$onMenuDid2 === void 0 || _this$props$onMenuDid2.call(_this$props5, event);
    event.stopPropagation();
  };
  _handleOnMenuDidCancel = event => {
    var _this$props$onMenuDid3, _this$props6;
    (_this$props$onMenuDid3 = (_this$props6 = this.props).onMenuDidCancel) === null || _this$props$onMenuDid3 === void 0 || _this$props$onMenuDid3.call(_this$props6, event);

    // guard: event is a native event
    if (event.isUsingActionSheetFallback) return;
    event.stopPropagation();
  };
  _handleOnPressMenuItem = event => {
    var _this$props$onPressMe, _this$props7;
    (_this$props$onPressMe = (_this$props7 = this.props).onPressMenuItem) === null || _this$props$onPressMe === void 0 || _this$props$onPressMe.call(_this$props7, event);
    event.stopPropagation();
  };
  _handleOnRequestDeferredElement = event => {
    const {
      onRequestDeferredElement
    } = this.props;
    const {
      deferredID
    } = event.nativeEvent;
    onRequestDeferredElement === null || onRequestDeferredElement === void 0 || onRequestDeferredElement(deferredID, items => {
      this.provideDeferredElements(deferredID, items);
    });
  };
  render() {
    const props = this.getProps();
    const state = this.state;
    const shouldUseContextMenuButton = _LibEnv.LIB_ENV.isContextMenuButtonSupported;
    const shouldUseContextMenuView = !_LibEnv.LIB_ENV.isContextMenuButtonSupported && _LibEnv.LIB_ENV.isContextMenuViewSupported;

    // TODO: Rename to 'sharedProps'
    const nativeComponentProps = {
      menuConfig: props.menuConfig,
      isContextMenuEnabled: props.isContextMenuEnabled,
      isMenuPrimaryAction: props.isMenuPrimaryAction,
      // event handlers
      onMenuWillShow: this._handleOnMenuWillShow,
      onMenuWillHide: this._handleOnMenuWillHide,
      onMenuDidShow: this._handleOnMenuDidShow,
      onMenuDidHide: this._handleOnMenuDidHide,
      onMenuDidCancel: this._handleOnMenuDidCancel,
      onMenuWillCancel: this._handleOnMenuWillCancel,
      onPressMenuItem: this._handleOnPressMenuItem,
      onRequestDeferredElement: this._handleOnRequestDeferredElement
    };
    const contents = shouldUseContextMenuButton ?
    /*#__PURE__*/
    // A - Use 'RNIContextMenuButton'
    _react.default.createElement(_RNIContextMenuButton.RNIContextMenuButton, _extends({}, props.viewProps, nativeComponentProps, {
      ref: r => {
        this.nativeRef = r;
      },
      style: [styles.menuButton, props.viewProps.style]
    }), props.viewProps.children) : shouldUseContextMenuView ?
    /*#__PURE__*/
    // B - Use 'ContextMenuView' Fallback
    _react.default.createElement(_ContextMenuView.ContextMenuView, _extends({}, props.viewProps, nativeComponentProps, {
      onRequestDeferredElement: props.onRequestDeferredElement
    }), props.viewProps.children) :
    /*#__PURE__*/
    // C - Use Regular View
    _react.default.createElement(_reactNative.View, props.viewProps, this.props.children);
    return /*#__PURE__*/_react.default.createElement(_ContextMenuButtonContext.ContextMenuButtonContext.Provider, {
      value: {
        getRefToContextMenuButton: this._handleGetRefToContextMenuButton,
        isMenuVisible: state.menuVisible
      }
    }, contents);
  }
}
exports.ContextMenuButton = ContextMenuButton;
;
const styles = _reactNative.StyleSheet.create({
  menuButton: {
    backgroundColor: 'transparent'
  }
});
//# sourceMappingURL=ContextMenuButton.js.map